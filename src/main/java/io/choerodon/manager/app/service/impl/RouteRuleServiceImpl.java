package io.choerodon.manager.app.service.impl;import com.github.pagehelper.PageInfo;import io.choerodon.core.exception.CommonException;import io.choerodon.manager.api.dto.RouteRuleDTO;import io.choerodon.manager.api.dto.RouteRuleVO;import io.choerodon.manager.app.service.RouteRuleService;import io.choerodon.manager.infra.feign.IamClient;import org.springframework.data.domain.Pageable;import org.springframework.http.ResponseEntity;import org.springframework.stereotype.Service;/** * RouteRuleServiceImpl * * @author pengyuhua * @date 2019/10/25 */@Servicepublic class RouteRuleServiceImpl implements RouteRuleService {    public static final String IAM_CLIENT_FEIGN_EXECUTE_EXCEPTION = "error.base.service.feign.execute.fail";    private IamClient iamClient;    public RouteRuleServiceImpl(IamClient iamClient) {        this.iamClient = iamClient;    }    @Override    public PageInfo<RouteRuleVO> listRouteRules(Pageable pageable, String code) {        ResponseEntity<PageInfo<RouteRuleVO>> pageInfoResponseEntity;        // 查询路由信息        try {            pageInfoResponseEntity = iamClient.listRouteRules(pageable, code);            if (pageInfoResponseEntity == null) {                throw new CommonException(IAM_CLIENT_FEIGN_EXECUTE_EXCEPTION);            }        } catch (Exception e) {            throw new CommonException(IAM_CLIENT_FEIGN_EXECUTE_EXCEPTION, e);        }        PageInfo<RouteRuleVO> routeRuleVOPageInfo = pageInfoResponseEntity.getBody();        routeRuleVOPageInfo.getList().forEach(v -> {            // todo 查询主机信息        });        return routeRuleVOPageInfo;    }    @Override    public RouteRuleVO queryRouteRuleDetailById(Long id) {        // 删除base 路由用户关联信息        ResponseEntity<RouteRuleVO> routeRuleVOResponseEntity;        try {            routeRuleVOResponseEntity = iamClient.queryRouteRuleDetailById(id);            if (routeRuleVOResponseEntity == null) {                throw new CommonException(IAM_CLIENT_FEIGN_EXECUTE_EXCEPTION);            }        } catch (Exception e) {            throw new CommonException(IAM_CLIENT_FEIGN_EXECUTE_EXCEPTION, e);        }        // todo 删除 路由主机关联信息        return routeRuleVOResponseEntity.getBody();    }    @Override    public RouteRuleVO insertRouteRule(RouteRuleVO routeRuleVO) {        // 更新路由及关联用户信息        ResponseEntity<RouteRuleVO> routeRuleVOResponseEntity;        try {            routeRuleVOResponseEntity = iamClient.insertRouteRule(routeRuleVO);            if (routeRuleVOResponseEntity == null) {                throw new CommonException(IAM_CLIENT_FEIGN_EXECUTE_EXCEPTION);            }        } catch (Exception e) {            throw new CommonException(IAM_CLIENT_FEIGN_EXECUTE_EXCEPTION, e);        }        // todo 更新路由配置主机信息        return routeRuleVOResponseEntity.getBody();    }    @Override    public Boolean deleteRouteRuleById(Long id) {        // 删除路由及关联用户信息        ResponseEntity<Boolean> booleanResponseEntity;        try {            booleanResponseEntity = iamClient.deleteRouteRuleById(id);            if (booleanResponseEntity == null) {                throw new CommonException(IAM_CLIENT_FEIGN_EXECUTE_EXCEPTION);            }        } catch (Exception e) {            throw new CommonException(IAM_CLIENT_FEIGN_EXECUTE_EXCEPTION, e);        }        // todo 删除路由配置主机信息        return booleanResponseEntity.getBody();    }    @Override    public RouteRuleVO updateRouteRule(RouteRuleVO routeRuleVO, Long objectVersionNumber) {        // 更新路由及关联用户信息        ResponseEntity<RouteRuleVO> routeRuleVOResponseEntity;        try {            routeRuleVOResponseEntity = iamClient.updateRouteRule(routeRuleVO, objectVersionNumber);            if (routeRuleVOResponseEntity == null) {                throw new CommonException(IAM_CLIENT_FEIGN_EXECUTE_EXCEPTION);            }        } catch (Exception e) {            throw new CommonException(IAM_CLIENT_FEIGN_EXECUTE_EXCEPTION, e);        }        // todo 更新配置主机信息        return routeRuleVOResponseEntity.getBody();    }    @Override    public Boolean checkCode(RouteRuleVO routeRuleVO) {        ResponseEntity<Boolean> booleanResponseEntity;        try {            booleanResponseEntity = iamClient.checkCode(new RouteRuleDTO().setCode(routeRuleVO.getCode()));            if (booleanResponseEntity == null) {                throw new CommonException(IAM_CLIENT_FEIGN_EXECUTE_EXCEPTION);            }        } catch (Exception e) {            throw new CommonException(IAM_CLIENT_FEIGN_EXECUTE_EXCEPTION, e);        }        return booleanResponseEntity.getBody();    }}